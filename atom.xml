<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>彭能的博客</title>
  
  <subtitle>欢迎来到我的猪场</subtitle>
  <link href="https://guudman.github.io/atom.xml" rel="self"/>
  
  <link href="https://guudman.github.io/"/>
  <updated>2023-09-11T11:25:44.013Z</updated>
  <id>https://guudman.github.io/</id>
  
  <author>
    <name>Neng Peng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>neo4j基本使用</title>
    <link href="https://guudman.github.io/2023/09/11/neo4j%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://guudman.github.io/2023/09/11/neo4j%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2023-09-11T11:09:51.000Z</published>
    <updated>2023-09-11T11:25:44.013Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-neo4j数据类型"><a href="#1-neo4j数据类型" class="headerlink" title="1. neo4j数据类型"></a>1. neo4j数据类型</h4><p>1.Node: 节点， 基本语法：Node(*label, **properties)</p><p>第一步：连接neo4j数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:7474&quot;</span></span><br><span class="line">graph = Graph(url, username=<span class="string">&quot;neo4j&quot;</span>, password=<span class="string">&quot;szyh&quot;</span>)</span><br></pre></td></tr></table></figure><p>第二步：创建节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立节点</span></span><br><span class="line">node_1 = Node(<span class="string">&quot;英雄&quot;</span>, name=<span class="string">&quot;张无忌&quot;</span>)</span><br><span class="line">node_2 = Node(<span class="string">&quot;英雄&quot;</span>, name=<span class="string">&quot;杨道&quot;</span>, 武力值=<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">node_3 = Node(<span class="string">&quot;派别&quot;</span>, name=<span class="string">&quot;明教&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存入图数据库</span></span><br><span class="line">graph.create(node_1)</span><br><span class="line">graph.create(node_2)</span><br><span class="line">graph.create(node_3)</span><br><span class="line"><span class="built_in">print</span>(node_1)</span><br></pre></td></tr></table></figure><p><img src="/images/1692668067239-e7227df7-867e-41ad-9cf6-fb6d85176385.png"></p><p>2 relationship关系基本语法： Relationship((start_node, type, end_node, **properties)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加关系</span></span><br><span class="line">node_1_to_node_2 = Relationship(node_1, <span class="string">&#x27;教主&#x27;</span>, node_2)</span><br><span class="line">node_3_to_node_1 = Relationship(node_3, <span class="string">&#x27;统领&#x27;</span>, node_1)</span><br><span class="line">node_2_to_node_3 = Relationship(node_2, <span class="string">&#x27;师出&#x27;</span>, node_3)</span><br><span class="line">graph.create(node_1_to_node_2)</span><br><span class="line">graph.create(node_3_to_node_1)</span><br><span class="line">graph.create(node_2_to_node_3)</span><br></pre></td></tr></table></figure><p><img src="/images/neo4j%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.assets%5C1692668510722-f9833f06-967c-46c2-b96a-691de7332604.png"></p><ol><li>Path路径，基本语法：Path(*entities), 注意entities是实体(关系，节点都可以作为实体)</li></ol><p><img src="/2023/09/11/neo4j%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/neo4j%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.assets%5C1692668994710-e1991773-6b57-4b22-8471-ff8e25e395e5.png" alt="img"></p><ol><li>Subgraph:子图是节点和关系的任意集合，它也是Node, Relationship和Path的基类， 基本语法：Subgraph(nodes, relationships)。 空子图表示为None, 使用bool()可以测试是否为空，参数要按数组输入，如下面代码：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建子图，通过子图的方式更新数据库</span></span><br><span class="line">node_7 = Node(<span class="string">&#x27;英雄&#x27;</span>, name=<span class="string">&#x27;张翠山&#x27;</span>)</span><br><span class="line">node_8 = Node(<span class="string">&#x27;英雄&#x27;</span>, name=<span class="string">&#x27;殷素素&#x27;</span>)</span><br><span class="line">node_9 = Node(<span class="string">&#x27;英雄&#x27;</span>, name=<span class="string">&#x27;狮王&#x27;</span>)</span><br><span class="line"></span><br><span class="line">relationship7 = Relationship(node_1, <span class="string">&#x27;生父&#x27;</span>, node_7)</span><br><span class="line">relationship8 = Relationship(node_1, <span class="string">&#x27;生母&#x27;</span>, node_8)</span><br><span class="line">relationship9 = Relationship(node_1, <span class="string">&#x27;义父&#x27;</span>, node_9)</span><br><span class="line">subgraph_1 = Subgraph(nodes=[node_7, node_8, node_9],</span><br><span class="line">                      relationships=[relationship7, relationship8, relationship9])</span><br><span class="line">graph.create(subgraph_1)</span><br></pre></td></tr></table></figure><p><img src="/images/neo4j%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.assets%5C1692669527475-c9d0a0dc-9d4d-4ffd-98ed-a9afeb17a4b5.png"></p><p>工作流</p><ol><li>GraphService: 基于图服务的工作流</li><li>Graph: 基于图数据库的工作流</li><li>Transaction: 基于事务的工作流，一个Transaction分两个任务，增加一个新节点，将该节点与已有节点创建新关系。这两个任务有一个没完成，整个工作流就不会生效。通常，这种方式通过Graph.begin(readonly&#x3D;False)构造函数构造，参数readonly表示只读</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新事务</span></span><br><span class="line">transcation_1 = graph.begin()</span><br><span class="line"><span class="comment"># 创建一个新Node</span></span><br><span class="line">node_10 = Node(<span class="string">&#x27;武当&#x27;</span>, name=<span class="string">&#x27;张三丰&#x27;</span>)</span><br><span class="line">transcation_1.create(node_10)</span><br><span class="line"><span class="comment"># 创建两个关系: 张无忌-&gt;(师公)-&gt;张三丰 张翠山-&gt;(妻子)-&gt;殷素素</span></span><br><span class="line">relationship10 = Relationship(node_1, <span class="string">&#x27;师公&#x27;</span>, node_10)</span><br><span class="line">relationship11 = Relationship(node_7, <span class="string">&#x27;妻子&#x27;</span>, node_8)</span><br><span class="line">transcation_1.create(relationship10)</span><br><span class="line">transcation_1.create(relationship11)</span><br><span class="line">transcation_1.commit()</span><br></pre></td></tr></table></figure><p>一个transaction增加的一个节点和两个关系</p><p><img src="/images/neo4j%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.assets%5C1692670406583-378901a5-73a1-4897-b269-2913bec75ad8.png"></p><p>删</p><ol><li>删除数据库中所有的节点和关系: graph.delete_all()</li><li>其他删除方法如下(删除的基础是查询，但凡查询条件没错，就不会删错)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有，</span></span><br><span class="line"><span class="comment"># graph.delete_all()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照id删除，要删除节点前，首先需删除关系，否则会报错:ClientError</span></span><br><span class="line"><span class="comment"># graph.run(&#x27;math (r) where id(r) = 3 delete r&#x27;)</span></span><br><span class="line"><span class="comment"># 按照name属性删除，先增加一个独立的节点</span></span><br><span class="line">node_x = Node(<span class="string">&#x27;英雄&#x27;</span>, name=<span class="string">&#x27;韦一笑&#x27;</span>)</span><br><span class="line"><span class="comment"># graph.create(node_x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># graph.run(&#x27;match (n:英雄&#123;name:\&#x27;韦一笑\&#x27;&#125;) delete n&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个节点及与之相连的关系</span></span><br><span class="line"><span class="comment"># graph.run(&#x27;match (n:英雄&#123;name:\&#x27;韦一笑\&#x27;&#125;) detach delete n&#x27;)</span></span><br><span class="line"><span class="comment"># 删除某一类型的关系</span></span><br><span class="line">graph.run(<span class="string">&#x27;match ()-[r:喜欢]-&gt;() delete r;&#x27;</span>)</span><br><span class="line"><span class="comment"># 删除子图</span></span><br><span class="line"><span class="comment"># delete(subgraph_1)</span></span><br></pre></td></tr></table></figure><p>改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 改</span><br><span class="line"># 将狮王的武力值改为100</span><br><span class="line">node_9[&#x27;武力值&#x27;]=100</span><br><span class="line"># 本地修改完，要push到服务器上哦</span><br><span class="line">test_graph.push(node_9)</span><br></pre></td></tr></table></figure><p>查询</p><p>查询，按照路径、节点、关系等查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了方便查询更多内容，新增一些关系和节点</span></span><br><span class="line">transcation_2 = graph.begin()</span><br><span class="line">node_100 = Node(<span class="string">&#x27;巾帼&#x27;</span>, name=<span class="string">&#x27;赵敏&#x27;</span>)</span><br><span class="line">re_100 = Relationship(node_1, <span class="string">&#x27;Love&#x27;</span>, node_100)</span><br><span class="line"></span><br><span class="line">node_101 = Node(<span class="string">&#x27;巾帼&#x27;</span>, name=<span class="string">&#x27;周芷若&#x27;</span>)</span><br><span class="line">re_101 = Relationship(node_1, <span class="string">&#x27;knows&#x27;</span>, node_101)</span><br><span class="line">re_101_ = Relationship(node_101, <span class="string">&#x27;hate&#x27;</span>, node_100)</span><br><span class="line"></span><br><span class="line">node_102 = Node(<span class="string">&#x27;巾帼&#x27;</span>, name=<span class="string">&#x27;小昭&#x27;</span>)</span><br><span class="line">re_102 = Relationship(node_1, <span class="string">&#x27;knows&#x27;</span>, node_102)</span><br><span class="line"></span><br><span class="line">node_103 = Node(<span class="string">&#x27;巾帼&#x27;</span>, name=<span class="string">&#x27;蛛儿&#x27;</span>)</span><br><span class="line">re_103 = Relationship(node_103, <span class="string">&#x27;Love&#x27;</span>, node_1)</span><br><span class="line">transcation_2.create(node_100)</span><br><span class="line">transcation_2.create(re_100)</span><br><span class="line"></span><br><span class="line">transcation_2.create(node_101)</span><br><span class="line">transcation_2.create(re_101)</span><br><span class="line">transcation_2.create(re_101_)</span><br><span class="line"></span><br><span class="line">transcation_2.create(node_102)</span><br><span class="line">transcation_2.create(re_102)</span><br><span class="line"></span><br><span class="line">transcation_2.create(node_103)</span><br><span class="line">transcation_2.create(re_103)</span><br><span class="line">transcation_2.commit()</span><br></pre></td></tr></table></figure><p><img src="/images/neo4j%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.assets%5C1692672097202-eba07f27-1ef1-4c02-87ee-4c00d87b949d.png"></p><p>NodeMatcher: 定位满足特定条件的节点，基本语法：NodeMatcher(graph).match(*labels, **properties)， </p><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>first(）</td><td>返回查询结果第一个Node, 没有则返回空</td></tr><tr><td>where(conditino,properties)</td><td>过滤查询结果</td></tr><tr><td>order_by</td><td>排序</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 定义查询</span><br><span class="line">node_match = NodeMatcher(graph)</span><br><span class="line"># # 单个节点， 按照label和name查询</span><br><span class="line">node_single = node_match.match(&#x27;英雄&#x27;, name=&#x27;杨逍&#x27;).first()</span><br><span class="line">print(&quot;单节点查询:&quot;, node_single)</span><br><span class="line"></span><br><span class="line"># # 按label查询</span><br><span class="line"># node_hero = list(node_match.match(&#x27;英雄&#x27;).all())</span><br><span class="line"># print(&quot;查询结果类型&quot;, type(node_hero))</span><br><span class="line">node_hero = node_match.match(&#x27;英雄&#x27;).__iter__()</span><br><span class="line"></span><br><span class="line"># 循环取值</span><br><span class="line">i = 0</span><br><span class="line">for node in node_hero:</span><br><span class="line">    print(&quot;label查询第&#123;&#125;个为&#123;&#125;&quot;.format(i, node))</span><br><span class="line">    i += 1</span><br><span class="line"></span><br><span class="line"># 按照name查询</span><br><span class="line">node_name = node_match.match(name=&#x27;张无忌&#x27;)</span><br><span class="line">print(&quot;name查询结果&quot;, node_name)</span><br><span class="line"></span><br><span class="line"># 按照id查询</span><br><span class="line">node_id = node_match.get(1)</span><br><span class="line">print(&quot;id查询结果&quot;, node_id)</span><br></pre></td></tr></table></figure><ol><li>NodeMatch， 基本用法， NodeMatch(graph, labels&#x3D;frozenset({}), predicates&#x3D;(), order_by&#x3D;(), skip&#x3D;None, limit&#x3D;None)可以看出，NodeMatcher与NodeMatch参数完全不同，后面可以加很多条件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">node_match1 = NodeMatch(graph, labels=<span class="built_in">frozenset</span>(&#123;<span class="string">&#x27;英雄&#x27;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>,<span class="string">&#x27;遍历所有节点&#x27;</span>, <span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> <span class="built_in">iter</span>(node_match1):</span><br><span class="line">    <span class="built_in">print</span>(node)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>,<span class="string">&#x27;查询结果计数&#x27;</span>, <span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(node_match1.__len__())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照武力值排序查询结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>,<span class="string">&#x27;按照武力值排序查询结果&#x27;</span>, <span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>)</span><br><span class="line">wu = node_match1.order_by(<span class="string">&#x27;_.武力值&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> wu:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">=============== 遍历所有节点 ===============</span><br><span class="line">(_3104:英雄 &#123;name: <span class="string">&#x27;\u6768\u9053&#x27;</span>, 武力值: <span class="string">&#x27;100&#x27;</span>&#125;)</span><br><span class="line">(_3257:英雄 &#123;name: <span class="string">&#x27;\u5f20\u65e0\u5fcc&#x27;</span>&#125;)</span><br><span class="line">(_4209:英雄 &#123;name: <span class="string">&#x27;\u5f20\u7fe0\u5c71&#x27;</span>&#125;)</span><br><span class="line">(_4210:英雄 &#123;name: <span class="string">&#x27;\u72ee\u738b&#x27;</span>, 武力值: <span class="number">10</span>&#125;)</span><br><span class="line">(_4211:英雄 &#123;name: <span class="string">&#x27;\u6bb7\u7d20\u7d20&#x27;</span>&#125;)</span><br><span class="line">=============== 查询结果计数 ===============</span><br><span class="line"><span class="number">5</span></span><br><span class="line">=============== 按照武力值排序查询结果 ===============</span><br><span class="line">(_3104:英雄 &#123;name: <span class="string">&#x27;\u6768\u9053&#x27;</span>, 武力值: <span class="string">&#x27;100&#x27;</span>&#125;)</span><br><span class="line">(_4210:英雄 &#123;name: <span class="string">&#x27;\u72ee\u738b&#x27;</span>, 武力值: <span class="number">10</span>&#125;)</span><br><span class="line">(_3257:英雄 &#123;name: <span class="string">&#x27;\u5f20\u65e0\u5fcc&#x27;</span>&#125;)</span><br><span class="line">(_4209:英雄 &#123;name: <span class="string">&#x27;\u5f20\u7fe0\u5c71&#x27;</span>&#125;)</span><br><span class="line">(_4211:英雄 &#123;name: <span class="string">&#x27;\u6bb7\u7d20\u7d20&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><ol><li>RelationshipMatcher:用于选择满足一组特定标准的关系的匹配器，基础语法，relation&#x3D;RelationshipMatcher(graph)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">relation = RelationshipMatcher(graph)</span><br><span class="line"><span class="comment"># Node表示any node</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>,<span class="string">&#x27;hate关系查询&#x27;</span>, <span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>)</span><br><span class="line">x = relation.<span class="keyword">match</span>(nodes=<span class="literal">None</span>, r_type=<span class="string">&#x27;hate&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x_ <span class="keyword">in</span> x:</span><br><span class="line">    <span class="built_in">print</span>(x_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加两关系</span></span><br><span class="line">rel_1 = Relationship(node_101, <span class="string">&#x27;情敌&#x27;</span>, node_102)</span><br><span class="line">rel_2 = Relationship(node_102, <span class="string">&#x27;情敌&#x27;</span>, node_103)</span><br><span class="line">graph.create(rel_1)</span><br><span class="line">graph.create(rel_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 情敌查询结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>,<span class="string">&#x27;hate关系查询结果&#x27;</span>, <span class="string">&#x27;=&#x27;</span>*<span class="number">15</span>)</span><br><span class="line">x = relation.<span class="keyword">match</span>(nodes=<span class="literal">None</span>, r_type=<span class="string">&#x27;情敌&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x_ <span class="keyword">in</span> x:</span><br><span class="line">    <span class="built_in">print</span>(x_)</span><br><span class="line">=============== hate关系查询 ===============</span><br><span class="line">(周芷若)-[:hate &#123;&#125;]-&gt;(赵敏)</span><br><span class="line">=============== hate关系查询结果 ===============</span><br><span class="line">(小昭)-[:情敌 &#123;&#125;]-&gt;(蛛儿)</span><br><span class="line">(周芷若)-[:情敌 &#123;&#125;]-&gt;(小昭)</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-neo4j数据类型&quot;&gt;&lt;a href=&quot;#1-neo4j数据类型&quot; class=&quot;headerlink&quot; title=&quot;1. neo4j数据类型&quot;&gt;&lt;/a&gt;1. neo4j数据类型&lt;/h4&gt;&lt;p&gt;1.Node: 节点， 基本语法：Node(*label, **</summary>
      
    
    
    
    
    <category term="neo4j" scheme="https://guudman.github.io/tags/neo4j/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="https://guudman.github.io/2023/09/09/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    <id>https://guudman.github.io/2023/09/09/%E5%85%B3%E4%BA%8E%E6%88%91/</id>
    <published>2023-09-09T07:55:49.000Z</published>
    <updated>2023-09-09T07:56:26.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>无论你遇见谁，他&#x2F;她都是你生命中该出现的人，绝非偶然，他&#x2F;她一定会教会你一些什么。所以你要相信， 无论你走到哪里，那都是你该去的地方，经历一些你该经历的事，遇见一些你该遇见的人。</p><h2 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h2><p>* </p><p>* </p><h2 id="希望你的加入"><a href="#希望你的加入" class="headerlink" title="希望你的加入"></a>希望你的加入</h2><p>* </p><p>* </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;自我介绍&quot;&gt;&lt;a href=&quot;#自我介绍&quot; class=&quot;headerlink&quot; title=&quot;自我介绍&quot;&gt;&lt;/a&gt;自我介绍&lt;/h2&gt;&lt;p&gt;无论你遇见谁，他&amp;#x2F;她都是你生命中该出现的人，绝非偶然，他&amp;#x2F;她一定会教会你一些什么。所以你要相信， 无论你</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>欢迎来到我的世界</title>
    <link href="https://guudman.github.io/2023/09/08/%E4%B8%96%E7%95%8C%EF%BC%8C%E4%BD%A0%E5%A5%BD/"/>
    <id>https://guudman.github.io/2023/09/08/%E4%B8%96%E7%95%8C%EF%BC%8C%E4%BD%A0%E5%A5%BD/</id>
    <published>2023-09-08T08:39:39.830Z</published>
    <updated>2023-09-09T07:50:49.347Z</updated>
    
    <content type="html"><![CDATA[<p>感谢你的到来，这是我的个人博客，后续会不定期更新个人笔记。</p><p>有任何想要沟通交流的，可以通过邮箱<a href="mailto:&#x32;&#x36;&#54;&#51;&#x30;&#49;&#55;&#51;&#55;&#57;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#x32;&#x36;&#54;&#51;&#x30;&#49;&#55;&#51;&#55;&#57;&#x40;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a>联系。我的[GitHub](<a href="https://github.com/GuudMan/">GuudMan (github.com)</a>).</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感谢你的到来，这是我的个人博客，后续会不定期更新个人笔记。&lt;/p&gt;
&lt;p&gt;有任何想要沟通交流的，可以通过邮箱&lt;a href=&quot;mailto:&amp;#x32;&amp;#x36;&amp;#54;&amp;#51;&amp;#x30;&amp;#49;&amp;#55;&amp;#51;&amp;#55;&amp;#57;&amp;#x40;&amp;#x71;&amp;#</summary>
      
    
    
    
    
  </entry>
  
</feed>
